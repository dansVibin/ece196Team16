clear; close all; clc;
%% Importing MODEL Data
audioFeatures = readtable('audioFeatures.csv');
trackInfo = readtable('trackInfo.csv');

trackInfo(:,1) = [];
genreTags = table2cell(trackInfo(:,3));
genreList = ["Classical" , "80s" , "Hip Hop" , "Metal"];

songs = [1:height(audioFeatures)];
numSongs = length(songs);
numGenres = 4;
songsPerGenre = numSongs/numGenres;

Genre = string(80*ones(numSongs,1));

songMean = zeros(numGenres,1);
average = zeros(numGenres,1);

%organizing labels/data
audioFeaturesLabels = string(table2cell(audioFeatures(1,1:2:width(audioFeatures))));
audioFeaturesLabels(:,end) = [];
audioFeaturesLabels(:,12:16) = [];
audioFeaturesData = audioFeatures(:,2:2:width(audioFeatures));
audioFeaturesData(:,end) = [];
audioFeaturesData(:,12:16) = [];
audioFeaturesDataNew = zeros(height(audioFeatures),width(audioFeaturesData));

for i = 1:height(audioFeatures)
    
    for j = 1 : width(audioFeaturesData)
        audioFeaturesDataNew(i,j) = str2num(cell2mat(table2array(audioFeaturesData(i,j))));
        %if (i ==1) audioFeaturesLabels{j}(1) = upper(audioFeaturesLabels{j}(1)); 
        %end
    end
    for k=1:numGenres
        if (contains(genreTags{i},lower(genreList(k)))) == 1
            Genre(i,1) = genreList(k); end
    end
    
end
%% Plotting
for i = 1:width(audioFeaturesData)
    %figure(i)
        for j = 1:numGenres
            genreSection = [(songsPerGenre*j-songsPerGenre+1):songsPerGenre*j];
            songMean(j) = mean(genreSection);
            average(j) = mean(audioFeaturesDataNew(genreSection,i));
            %scatter(songs(genreSection),audioFeaturesDataNew(genreSection,i),50,'filled')
            %hold on 
            audioFeat4{i}(:,j) = audioFeaturesDataNew(genreSection,i);
        end
%     plot(songMean,average,'--k.','Linewidth',2','Markersize',34)
%     hold on
%     grid on
%     xlabel('Song Genres')
%     title('Audio Feature by Genre')
%     ylabel(audioFeaturesLabels{i})
%     if (i ==2 || i ==4) location = 'Southeast';
%     else location = 'Northeast';end
%     legend(["Classical" , "80s" , "Hip Hop" , "Metal" , "Average"],'Location',location)
end

Dancibility = reshape(audioFeat4{1},[numSongs,1]);
Energy = reshape(audioFeat4{2},[numSongs,1]);
Key = reshape(audioFeat4{3},[numSongs,1]);
Loudness = reshape(audioFeat4{4},[numSongs,1]);
mode = reshape(audioFeat4{5},[numSongs,1]);
Speechiness = reshape(audioFeat4{6},[numSongs,1]);
Acousticness = reshape(audioFeat4{7},[numSongs,1]);
Instrumentalness = reshape(audioFeat4{8},[numSongs,1]);
Liveness = reshape(audioFeat4{9},[numSongs,1]);
Valence = reshape(audioFeat4{10},[numSongs,1]);
Tempo = reshape(audioFeat4{11},[numSongs,1]);
Duration = reshape(audioFeat4{12},[numSongs,1]);

musicDataSet = table(Dancibility,Energy,Valence,Acousticness,Instrumentalness,Genre);
musicDataSet2 = table(Dancibility,Energy,Valence,Acousticness,Speechiness,Instrumentalness,Genre);

% for i = 1:width(audioFeaturesData)
%     figure(width(audioFeaturesData)+i)
%     boxplot(audioFeat4{i},genreList)
%     title('Audio Feature by Genre')
%     hold on
%     grid on
%     xlabel('Song Genres')
%     ylabel(audioFeaturesLabels{i})
% end
%% Importing TEST Data
audioFeaturesTEST = readtable('audioFeaturesNICK.csv');
trackInfoTEST = readtable('trackInfoNICK.csv');
trackInfoTEST(:,1) = [];

songsTEST = [1:height(audioFeaturesTEST)];
numSongsTEST = length(songsTEST);
songsPerGenreTEST = numSongsTEST/numGenres;
songMeanTEST = zeros(numGenres,1);
averageTEST = zeros(numGenres,1);
genreTagsTEST = table2cell(trackInfoTEST(:,3));

GenreTEST = string(80*ones(numSongsTEST,1));

audioFeaturesDataTEST = audioFeaturesTEST(:,2:2:width(audioFeaturesTEST));
audioFeaturesDataTEST(:,end) = [];
audioFeaturesDataTEST(:,12:16) = [];

audioFeaturesDataTESTNew = zeros(height(audioFeaturesTEST),width(audioFeaturesDataTEST));
for i = 1:height(audioFeaturesTEST)
    for j = 1 : width(audioFeaturesDataTEST)
        audioFeaturesDataTESTNew(i,j) = str2num(cell2mat(table2array(audioFeaturesDataTEST(i,j))));
        %if (i ==1) audioFeaturesLabels{j}(1) = upper(audioFeaturesLabels{j}(1)); 
        %end
    end
    for k=1:numGenres
        if (contains(genreTagsTEST{i},lower(genreList(k)))) == 1
            GenreTEST(i,1) = genreList(k); end
    end
end
%% Plotting
for i = 1:width(audioFeaturesDataTEST)
    %figure(i+24)
        for j = 1:numGenres
            genreSection = [(songsPerGenreTEST*j-songsPerGenreTEST+1):songsPerGenreTEST*j];
            songMeanTEST(j) = mean(genreSection);
            averageTEST(j) = mean(audioFeaturesDataTESTNew(genreSection,i));
            %scatter(songsTEST(genreSection),audioFeaturesDataTESTNew(genreSection,i),50,'filled')
            %hold on 
            audioFeat4TEST{i}(:,j) = audioFeaturesDataTESTNew(genreSection,i);
        end
%     plot(songMeanTEST,averageTEST,'--k.','Linewidth',1','Markersize',17)
%     hold on
%     grid on
%     xlabel('Song Genres')
%     title('Audio Feature by Genre')
%     ylabel(audioFeaturesLabels{i})
%     if (i ==2 || i ==4) location = 'Southeast';
%     else location = 'Northeast';end
%     legend(["Classical" , "80s" , "Hip Hop" , "Metal" , "Average"],'Location',location)
end

DancibilityTEST = reshape(audioFeat4TEST{1},[numSongsTEST,1]);
EnergyTEST = reshape(audioFeat4TEST{2},[numSongsTEST,1]);
KeyTEST = reshape(audioFeat4TEST{3},[numSongsTEST,1]);
LoudnessTEST = reshape(audioFeat4TEST{4},[numSongsTEST,1]);
modeTEST = reshape(audioFeat4TEST{5},[numSongsTEST,1]);
SpeechinessTEST = reshape(audioFeat4TEST{6},[numSongsTEST,1]);
AcousticnessTEST = reshape(audioFeat4TEST{7},[numSongsTEST,1]);
InstrumentalnessTEST = reshape(audioFeat4TEST{8},[numSongsTEST,1]);
LivenessTEST = reshape(audioFeat4TEST{9},[numSongsTEST,1]);
ValenceTEST = reshape(audioFeat4TEST{10},[numSongsTEST,1]);
TempoTEST = reshape(audioFeat4TEST{11},[numSongsTEST,1]);
DurationTEST = reshape(audioFeat4TEST{12},[numSongsTEST,1]);

musicDataSetTEST = [DancibilityTEST EnergyTEST ValenceTEST AcousticnessTEST InstrumentalnessTEST];
musicDataSetTEST2 = [DancibilityTEST EnergyTEST ValenceTEST AcousticnessTEST SpeechinessTEST InstrumentalnessTEST];
%% KNN Model
tic
model1 = fitcknn(musicDataSet(:,1:end-1),musicDataSet(:,end))
nieghbors1 = 3;
model1.NumNeighbors = nieghbors1;
Predicted = string(predict(model1,musicDataSetTEST));

toc
model2 = fitcknn(musicDataSet2(:,1:end-1),musicDataSet2(:,end))
nieghbors2 = 3;
model2.NumNeighbors = nieghbors2;
Predicted2 = string(predict(model2,musicDataSetTEST2));

Accuracy = 100 * (sum(Predicted == GenreTEST)/length(Predicted));
Accuracy2 = 100 * (sum(Predicted2 == GenreTEST)/length(Predicted));

Results = table(Predicted,GenreTEST) 
disp("Model 1 Accuracy ("+ stri4 neighbors) = " + string(Accuracy) + "%")
disp("Model 2 Accuracy (3 neighbors) = " + string(Accuracy2) + "%")


